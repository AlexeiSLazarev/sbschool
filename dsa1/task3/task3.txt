1. Схемы реаллокации

Цель: Реализовать динамический массив с эффективной схемой реаллокации.

Описание:

Динамический массив должен автоматически увеличивать и уменьшать свою емкость в зависимости от количества элементов.
Используются две схемы реаллокации:
Аддитивная: емкость увеличивается на фиксированное значение при необходимости.
Мультипликативная: емкость увеличивается в несколько раз (обычно в два раза) при необходимости.
Выбор схемы зависит от конкретной задачи и размера массива.
В задаче используется мультипликативная схема с коэффициентом 2.
При уменьшении емкости используется коэффициент 1.5.
Минимальная емкость массива равна 16 элементам.

2. Реализация динамического массива в Python

Цель: Реализовать динамический массив в Python с использованием библиотеки ctypes.

Описание:

Класс DynArray
Поля класса:
count: текущее количество элементов в массиве.
capacity: текущая емкость буфера.
array: указатель на блок памяти нужной емкости, хранящий элементы PyObject.

Методы класса:
__init__(): инициализирует массив с емкостью 16 элементов.
__len__(): возвращает текущее количество элементов в массиве.
make_array(new_capacity): создает новый блок памяти заданной емкости.
__getitem__(i): возвращает элемент по индексу i.
resize(new_capacity): изменяет емкость буфера на new_capacity.
append(itm): добавляет элемент itm в конец массива.
insert(i, itm): вставляет элемент itm в позицию i.
delete(i): удаляет элемент из позиции i.
Методы resize(), append(), insert(), delete() должны реализовывать соответствующие схемы реаллокации.

4. Задания

4.1. Добавьте метод insert(i, itm)

Вставляет элемент itm в позицию i, сдвигая все последующие элементы.
Учитывает, что новая длина массива может превысить размер буфера.
При i = count добавляет элемент в хвост массива.
Генерирует исключение IndexError, если i выходит за пределы массива.

4.2. Добавьте метод delete(i)

Удаляет элемент из позиции i.
При необходимости сжимает буфер.
Генерирует исключение IndexError, если i выходит за пределы массива.
4.3. Оцените меры сложности

Оцените временную и пространственную сложность методов insert() и delete().
4.4. Напишите тесты

Проверьте работу методов insert() и delete() в следующих случаях:
Вставка элемента, когда размер буфера не превышен.
Вставка элемента, когда размер буфера превышен.
Попытка вставки элемента в недопустимую позицию.
Удаление элемента, когда размер буфера не меняется.
Удаление элемента, когда размер буфера уменьшается.
Попытка удаления элемента в недопустимой позиции.


